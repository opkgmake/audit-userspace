name: CI Matrix

on:
  workflow_dispatch:  # 手动触发
    inputs:
      build_arm64:
        description: "Build ARM64 binaries (cross-compile)"
        required: true
        type: boolean
        default: true

jobs:
  # 保留原有的多平台构建任务
  build-and-test:
    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    strategy:
      fail-fast: false
      matrix:
        container: ["ubuntu:latest", "fedora:latest"]
        compiler: [gcc, clang]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: matrix.container == 'ubuntu:latest'
        run: |
          apt-get update
          apt-get install -y \
            gawk diffutils autoconf automake libtool \
            ${{ matrix.compiler }} \
            linux-headers-generic \
            build-essential \
            libkrb5-dev \
            libcap-ng-dev \
            python3-dev swig \
            libldap-dev

      - name: Install dependencies (Fedora)
        if: matrix.container == 'fedora:latest'
        run: |
          dnf install -y \
            gawk diffutils autoconf automake libtool gdm \
            ${{ matrix.compiler }} \
            kernel-headers \
            krb5-devel \
            libcap-ng-devel \
            python3-devel python-unversioned-command swig \
            openldap-devel

      - name: Set compiler
        run: |
          echo "CC=${{ matrix.compiler }}" >> $GITHUB_ENV

      - name: Build
        run: |
          autoreconf -f --install
          ./configure --with-python3=yes --enable-gssapi-krb5=yes \
            --with-arm --with-aarch64 --with-libcap-ng=yes \
            --without-golang --enable-zos-remote \
            --enable-experimental --with-io_uring
          make -j$(nproc)

      - name: Run tests
        if: matrix.container != 'ubuntu:latest'
        run: make check

  # 修复的ARM64交叉编译任务
  cross-compile-arm64:
    name: Cross-compile for ARM64
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ github.event.inputs.build_arm64 == 'true' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up cross-compilation environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            build-essential \
            autoconf automake libtool \
            libcap-ng-dev \
            python3-dev swig \
            libkrb5-dev \
            libldap-dev \
            file

      - name: Configure for ARM64
        run: |
          autoreconf -f --install
          # 使用交叉编译器前缀
          export CC=aarch64-linux-gnu-gcc
          export CXX=aarch64-linux-gnu-g++
          ./configure \
            --host=aarch64-linux-gnu \
            --build=x86_64-linux-gnu \
            --with-python3=yes \
            --enable-gssapi-krb5=yes \
            --with-aarch64 \
            --with-libcap-ng=yes \
            --without-golang \
            --enable-zos-remote \
            --enable-experimental \
            --with-io_uring

      - name: Build ARM64 binaries
        run: |
          make -j$(nproc)
          # 验证二进制文件架构
          find . -type f -executable -exec sh -c "file {} | grep -q 'ARM aarch64'" \; -print

      - name: Package ARM64 binaries
        run: |
          mkdir -p artifacts/arm64-bin
          # 复制所有可执行文件和库
          find . -type f -executable -exec cp --parents {} artifacts/arm64-bin/ \;
          find . -name '*.so' -exec cp --parents {} artifacts/arm64-bin/ \;
          
          # 创建压缩包
          tar -czvf arm64-binaries.tar.gz -C artifacts/arm64-bin .
          
      - name: Upload ARM64 binaries
        uses: actions/upload-artifact@v4  # 更新到v4版本
        with:
          name: arm64-binaries
          path: arm64-binaries.tar.gz
          retention-days: 7
