name: ARM64 Static Build

on:
  workflow_dispatch:  # 手动触发

jobs:
  static-build-arm64:
    name: Static Build for ARM64
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            autoconf \
            automake \
            libtool \
            file \
            pkg-config \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            binutils-aarch64-linux-gnu \
            libc6-dev-arm64-cross \
            libldap-dev \
            libsasl2-dev \
            krb5-multidev

      - name: Verify cross-compiler
        run: |
          echo "验证交叉编译器:"
          aarch64-linux-gnu-gcc --version
          echo 'int main(){return 0;}' > test.c
          aarch64-linux-gnu-gcc -static -o test test.c
          file test
          ./test || echo "Test failed with status $?"
          rm test.c test

      - name: Prepare build environment
        run: |
          autoreconf -f --install
          
          # 创建简化的配置脚本
          cat > simple-configure.sh << 'EOF'
          #!/bin/bash
          set -x
          
          # 使用最小配置测试
          ./configure \
            --host=aarch64-linux-gnu \
            CC="aarch64-linux-gnu-gcc" \
            CFLAGS="-static" \
            LDFLAGS="-static"
          
          # 如果最小配置失败，显示日志
          if [ $? -ne 0 ]; then
            echo "最小配置失败，显示 config.log:"
            cat config.log
            exit 1
          fi
          EOF
          
          chmod +x simple-configure.sh

      - name: Run minimal configuration
        run: |
          ./simple-configure.sh

      - name: Build with full configuration
        run: |
          # 完整配置
          ./configure \
            --host=aarch64-linux-gnu \
            --build=x86_64-linux-gnu \
            --enable-static \
            --disable-shared \
            --with-python3=no \
            --enable-gssapi-krb5=yes \
            --with-aarch64 \
            --with-libcap-ng=yes \
            --without-golang \
            --enable-zos-remote \
            --enable-experimental \
            --with-io_uring \
            CC="aarch64-linux-gnu-gcc" \
            CXX="aarch64-linux-gnu-g++" \
            AR="aarch64-linux-gnu-ar" \
            RANLIB="aarch64-linux-gnu-ranlib" \
            STRIP="aarch64-linux-gnu-strip" \
            CFLAGS="-static -O2" \
            CXXFLAGS="-static -O2" \
            LDFLAGS="-static -lldap -llber -lsasl2 -lkrb5 -lkrb5support"
          
          # 如果配置失败，显示日志
          if [ $? -ne 0 ]; then
            echo "完整配置失败，显示 config.log:"
            cat config.log
            exit 1
          fi
          
          # 构建项目
          make -j$(nproc) V=1
          
          # 如果构建失败，显示错误
          if [ $? -ne 0 ]; then
            echo "构建失败"
            exit 1
          fi
          
          # 剥离调试符号
          find . -type f -executable -exec aarch64-linux-gnu-strip {} \;
          
          # 收集二进制文件
          mkdir -p artifacts/static-arm64-bin
          find . -type f -executable -exec cp {} artifacts/static-arm64-bin/ \;
          
          # 验证文件
          file artifacts/static-arm64-bin/* | grep 'statically linked' | grep 'ARM aarch64'
          
          # 打包
          tar -czvf static-arm64-binaries.tar.gz -C artifacts/static-arm64-bin .
          du -h static-arm64-binaries.tar.gz

      - name: Upload static ARM64 binaries
        uses: actions/upload-artifact@v4
        with:
          name: static-arm64-binaries
          path: static-arm64-binaries.tar.gz
          retention-days: 7
