name: ARM64 Static Build

on:
  workflow_dispatch:  # 手动触发

jobs:
  static-build-arm64:
    name: Static Build for ARM64
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU static binaries
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Build static ARM64 binaries with Docker
        run: |
          # 创建 Dockerfile
          cat > Dockerfile.static-arm64 << 'EOF'
          FROM ubuntu:22.04 AS builder
          
          # 设置非交互式环境
          ENV DEBIAN_FRONTEND=noninteractive
          
          # 安装基础构建工具
          RUN apt-get update && \
              apt-get install -y \
                build-essential \
                autoconf \
                automake \
                libtool \
                file \
                pkg-config \
                gcc-aarch64-linux-gnu \
                g++-aarch64-linux-gnu \
                binutils-aarch64-linux-gnu
          
          WORKDIR /src
          COPY . .
          
          # 设置交叉编译环境
          ENV CC="aarch64-linux-gnu-gcc" \
              CXX="aarch64-linux-gnu-g++" \
              AR="aarch64-linux-gnu-ar" \
              RANLIB="aarch64-linux-gnu-ranlib" \
              STRIP="aarch64-linux-gnu-strip" \
              CFLAGS="-static -O2" \
              CXXFLAGS="-static -O2" \
              LDFLAGS="-static"
          
          # 配置和构建
          RUN autoreconf -f --install && \
              ./configure \
                --host=aarch64-linux-gnu \
                --build=x86_64-linux-gnu \
                --enable-static \
                --disable-shared \
                --with-python3=no \
                --enable-gssapi-krb5=yes \
                --with-aarch64 \
                --with-libcap-ng=yes \
                --without-golang \
                --enable-zos-remote \
                --enable-experimental \
                --with-io_uring && \
              make -j$(nproc) && \
              find . -type f -executable -exec aarch64-linux-gnu-strip {} \;
          
          # 创建输出目录
          RUN mkdir -p /output/bin && \
              find . -type f -executable -exec cp {} /output/bin/ \;
          
          # 最终阶段只包含二进制文件
          FROM scratch
          COPY --from=builder /output/bin /
          EOF
          
          # 构建Docker镜像并提取二进制文件
          docker buildx build --platform linux/arm64 -t static-arm64-builder -f Dockerfile.static-arm64 .
          
          # 创建容器并复制二进制文件
          docker create --name extract-static static-arm64-builder
          docker cp extract-static:/bin ./static-binaries
          docker rm extract-static
          
          # 打包二进制文件
          tar -czvf static-arm64-binaries.tar.gz -C static-binaries .
          
          # 验证文件
          file static-binaries/* | grep 'statically linked' | grep 'ARM aarch64'
          du -h static-arm64-binaries.tar.gz

      - name: Upload static ARM64 binaries
        uses: actions/upload-artifact@v4
        with:
          name: static-arm64-binaries
          path: static-arm64-binaries.tar.gz
          retention-days: 7
